nextflow_process {

    name "Test Process BLAT_MIRNA"
    script "../blat_mirna.nf"
    process "BLAT_MIRNA"
    tag "modules"
    tag "modules_local"
    tag "blat_mirna"

    test("cDNA BLAT - Human") {

        when {
            params {
                outdir = "${outputDir}"
            }
            process {
                """
                input[0] = "cdna"
                input[1] =  [file("https://github.com/nf-core/test-datasets/raw/smrnaseq/miRBase/hairpin.fa", checkIfExists: true)]
                input[2] =  [file("https://huggingface.co/datasets/nf-core/smrnaseq/resolve/main/GRCh37/Homo_sapiens.GRCh37.cdna.all.fa", checkIfExists: true)]
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()

            with(process.out.filtered_set) {
                with(get(0)) {
                    assert get(0).endsWith("filtered.fa")

                    // Check for AWK filtering of specific biotype
                    def lines = path(get(0)).readLines()
                    assert !lines.any { it.contains("transcript_biotype:miRNA") }

                    // Check for exclusion of miRNAs hits
                    assert !lines.any { it.contains("ENST00000564740.1") }
                }
            }
        }

    }

    test("ncRNA BLAT - Human") {

        when {
            params {
                outdir = "${outputDir}"
            }
            process {
                """
                input[0] = "ncRNA"
                input[1] =  [file("https://github.com/nf-core/test-datasets/raw/smrnaseq/miRBase/hairpin.fa", checkIfExists: true)]
                input[2] =  [file("https://huggingface.co/datasets/nf-core/smrnaseq/resolve/main/GRCh37/Homo_sapiens.GRCh37.ncrna.fa", checkIfExists: true)]
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()

            with(process.out.filtered_set) {
                with(get(0)) {
                    assert get(0).endsWith("filtered.fa")

                    // Check for AWK filtering of specific biotype
                    def lines = path(get(0)).readLines()
                    // Lines contain transcript_biotype:rRNA or miRNA, so AWK assertions do not work:
                    //assert !lines.any { it.contains("transcript_biotype:rRNA") }
                    //assert !lines.any { it.contains("transcript_biotype:miRNA") }

                    // Check for exclusion of miRNAs hits
                    assert !lines.any { it.contains("ENST00000564740.1") }
                }
            }
        }

    }

    test("tRNA BLAT - Human") {

        when {
            params {
                outdir = "${outputDir}"
            }
            process {
                """
                input[0] = "tRNA"
                input[1] =  [file("https://github.com/nf-core/test-datasets/raw/smrnaseq/miRBase/hairpin.fa", checkIfExists: true)]
                input[2] =  [file("https://huggingface.co/datasets/nf-core/smrnaseq/resolve/main/GRCh37/hg19-tRNAs.fa", checkIfExists: true)]
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()

            with(process.out.filtered_set) {
                with(get(0)) {
                    assert get(0).endsWith("filtered.fa")

                    // Check for exclusion of miRNAs hits
                    def lines = path(get(0)).readLines()
                    assert !lines.any { it.contains("ENST00000564740.1") }
                }
            }
        }

    }

}
