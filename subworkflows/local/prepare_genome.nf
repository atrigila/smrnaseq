//
// Uncompress and prepare reference genome files
//

// nf-core modules
include { UNTARFILES as UNTAR_BOWTIE_INDEX } from '../../modules/nf-core/untarfiles'
// local modules
include { INDEX_GENOME                     } from '../../modules/local/bowtie_genome'


workflow PREPARE_GENOME {
    take:
    val_fasta                //      file: /path/to/genome.fasta
    val_bowtie_index         //      file or directory: /path/to/bowtie/ or /path/to/bowtie.tar.gz

    main:
    ch_versions = Channel.empty()

    // Parameter channel handling
    // Path channels
    ch_fasta        = val_fasta            ? Channel.fromPath(val_fasta, checkIfExists: true).map{ it -> [ [id:it.baseName], it ] }.collect()        : Channel.empty()
    ch_bowtie_index = val_bowtie_index     ? Channel.fromPath(val_bowtie_index, checkIfExists: true).map{ it -> [ [id:it.baseName], it ] }.collect() : Channel.empty()
    
    // even if bowtie index is specified, there still needs to be a fasta.
    // without fasta, no genome analysis.
    if(val_fasta) {
        //Prepare bowtie index, unless specified
        //This needs to be done here as the index is used by GENOME_QUANT
        if(val_bowtie_index) {
            if (val_bowtie_index.endsWith(".tar.gz")) {
                UNTAR_BOWTIE_INDEX ( ch_bowtie_index )
                ch_bowtie_index = UNTAR_BOWTIE_INDEX.out.files.map { it[1] }
                ch_versions  = ch_versions.mix(UNTAR_BOWTIE_INDEX.out.versions)
            } else {
                ch_bowtie_index = Channel.fromPath("${val_bowtie_index}**ebwt", checkIfExists: true)
                    .ifEmpty{ error "Bowtie1 index directory not found: ${val_bowtie_index}" }
                    .filter { it != null }
            }
        } else {
            INDEX_GENOME ( ch_fasta )
            ch_versions = ch_versions.mix(INDEX_GENOME.out.versions)
            ch_bowtie_index = INDEX_GENOME.out.index
            // set to reformatted fasta as generated by `bowtie index`
            ch_fasta = INDEX_GENOME.out.fasta.map{ it -> [ [id:it.baseName], it ] }.collect() 
        }
    }
    
    emit:
    fasta            = ch_fasta        // channel: [ val(meta), fasta file]
    bowtie_index     = ch_bowtie_index // channel: [genome.1.ebwt, genome.2.ebwt, genome.3.ebwt, genome.4.ebwt, genome.rev.1.ebwt, genome.rev.2.ebwt]
    versions         = ch_versions     // channel: [ versions.yml ]
}